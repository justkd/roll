"use strict";
/**
 * @file Uniform.ts
 * @author Cadence Holmes
 * @copyright Cadence Holmes 2023
 * @license MIT
 * @fileoverview `export class Uniform`
 * Class implementing Mersenne Twister random number generator.
 */Object.defineProperty(exports,"__esModule",{value:!0}),exports.Uniform=void 0;class Uniform{random;seed;constructor(seed){const N=624,mt=new Array(N);let mti=null;const $state={seed:seed},$private={seed:{withInt:intSeed=>{let s;for(mt[0]=intSeed>>>0,mti=1;mti<N;mti+=1)s=mt[mti-1]^mt[mti-1]>>>30,mt[mti]=(1812433253*((4294901760&s)>>>16)<<16)+1812433253*(65535&s)+mti,mt[mti]>>>=0},withArray:arrSeed=>{let s;const v=arrSeed.constructor===Uint32Array?[...arrSeed]:arrSeed;let i=1,j=0,k=N>v.length?N:v.length;for($private.seed.withInt(v[0]);k>0;k-=1){s=mt[i-1]^mt[i-1]>>>30;const a=1664525*((4294901760&s)>>>16)<<16,b=1664525*(65535&s);mt[i]=(mt[i]^a+b)+v[j]+j,mt[i]>>>=0,i+=1,j+=1,i>=N&&(mt[0]=mt[N-1],i=1),j>=v.length&&(j=0)}for(k=N-1;k;k-=1){s=mt[i-1]^mt[i-1]>>>30;const a=1566083941*((4294901760&s)>>>16)<<16,b=1566083941*(65535&s);mt[i]=(mt[i]^a+b)-i,mt[i]>>>=0,i+=1,i>=N&&(mt[0]=mt[N-1],i=1)}mt.length<1&&(mt[0]=2147483648)},withCrypto:()=>{$state.seed=Uniform.createRandomSeed(),$private.seed.withArray($state.seed)}},init:withSeed=>{const ensureUint=num=>num>Number.MAX_SAFE_INTEGER?-1:(num<0&&(num=Math.abs(num)),Number.isInteger(num)||(num=Number(num.toFixed(0))),Number.isSafeInteger(num)||(num=-1),num),s=withSeed;if("number"==typeof s){let ss=s;ss=ensureUint(ss),ss>=0?($state.seed=ss,$private.seed.withInt(ss)):(console.warn("Seed integer is unsafe."),console.log("Generating a random seed array instead."),$private.seed.withCrypto())}else if(s&&s.every&&s.every((v=>"number"==typeof v))){let ss=s.constructor===Uint32Array?[...s]:s;ss.length>0?(ss=ss.map((x=>ensureUint(x))),ss.includes(-1)?(console.warn("Seed array can not contain unsafe integers."),console.log("Generating a random seed array instead."),$private.seed.withCrypto()):($state.seed=ss,$private.seed.withArray(ss))):(console.warn("Seed array can not be empty."),console.log("Generating a random seed array instead."),$private.seed.withCrypto())}else $private.seed.withCrypto()},int32:()=>{const M=397,UM=2147483648,LM=2147483647;let y,kk=0;const mag01=[0,2567483615];if(null!==mti){for(;kk<N-M;kk+=1)y=mt[kk]&UM|mt[kk+1]&LM,mt[kk]=mt[kk+M]^y>>>1^mag01[1&y];for(;kk<N-1;kk+=1)y=mt[kk]&UM|mt[kk+1]&LM,mt[kk]=mt[kk+(M-N)]^y>>>1^mag01[1&y];y=mt[N-1]&UM|mt[0]&LM,mt[N-1]=mt[M-1]^y>>>1^mag01[1&y],mti=0}return y=mt[mti+=1],y^=y>>>11,y^=y<<7&2636928640,y^=y<<15&4022730752,y^=y>>>18,y>>>0}};this.random=()=>{const fix=(value,repeat=6)=>{if(!value||Number.isNaN(parseFloat(`${value}`)))return value;const[intPart,decimalPart]=`${value}`.split(".");if(!decimalPart)return value;const regex=new RegExp(`(9{${repeat},}|0{${repeat},})(\\d)*$`,"gm"),matched=decimalPart.match(regex);if(!matched)return value;const[wrongPart]=matched,correctDecimalsLength=decimalPart.length-wrongPart.length,fixed=parseFloat(`${intPart}.${decimalPart}`);return parseFloat(fixed.toFixed(correctDecimalsLength))},c=$private.int32(),x=fix(67108864*(c>>>5)+(c>>>6)),y=fix(1/9007199254740992);return fix(x*y)},this.seed=$seed=>(null!=$seed&&$private.init($seed),$state.seed),$private.init(seed)}static createRandomSeed(){const max=623,min=20,len=Math.floor(Math.random()*Math.floor(max-min))+min;try{if(window?.crypto)return[...window.crypto.getRandomValues(new Uint32Array(len))]}catch{}let crypto;try{crypto=require("crypto");const buf=Buffer.alloc(len);return[...crypto.randomFillSync(buf)]}catch{const randomInt=()=>{const rand=Math.random().toFixed(4);return 1e3*Math.floor(Number(rand))};return new Array(len).fill(0).map((()=>randomInt()))}}}exports.Uniform=Uniform;